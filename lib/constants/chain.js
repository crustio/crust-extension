const MaxwellMetacalls = '';
const CrustMetacalls = 'bWV0YQxoGFN5c3RlbQABJChmaWxsX2Jsb2NrBBhfcmF0aW8cUGVyYmlsbAQFAUEgZGlzcGF0Y2ggdGhhdCB3aWxsIGZpbGwgdGhlIGJsb2NrIHdlaWdodCB1cCB0byB0aGUgZ2l2ZW4gcmF0aW8uGHJlbWFyawQcX3JlbWFyaxRCeXRlcwRoTWFrZSBzb21lIG9uLWNoYWluIHJlbWFyay44c2V0X2hlYXBfcGFnZXMEFHBhZ2VzDHU2NAT4U2V0IHRoZSBudW1iZXIgb2YgcGFnZXMgaW4gdGhlIFdlYkFzc2VtYmx5IGVudmlyb25tZW50J3MgaGVhcC4gc2V0X2NvZGUEEGNvZGUUQnl0ZXMEZFNldCB0aGUgbmV3IHJ1bnRpbWUgY29kZS5cc2V0X2NvZGVfd2l0aG91dF9jaGVja3MEEGNvZGUUQnl0ZXMEGQFTZXQgdGhlIG5ldyBydW50aW1lIGNvZGUgd2l0aG91dCBkb2luZyBhbnkgY2hlY2tzIG9mIHRoZSBnaXZlbiBgY29kZWAuXHNldF9jaGFuZ2VzX3RyaWVfY29uZmlnBExjaGFuZ2VzX3RyaWVfY29uZmlngE9wdGlvbjxDaGFuZ2VzVHJpZUNvbmZpZ3VyYXRpb24+BJxTZXQgdGhlIG5ldyBjaGFuZ2VzIHRyaWUgY29uZmlndXJhdGlvbi4sc2V0X3N0b3JhZ2UEFGl0ZW1zNFZlYzxLZXlWYWx1ZT4EaFNldCBzb21lIGl0ZW1zIG9mIHN0b3JhZ2UuMGtpbGxfc3RvcmFnZQQQa2V5cyBWZWM8S2V5PgR0S2lsbCBzb21lIGl0ZW1zIGZyb20gc3RvcmFnZS4sa2lsbF9wcmVmaXgIGHByZWZpeAxLZXkgX3N1YmtleXMMdTMyBBEBS2lsbCBhbGwgc3RvcmFnZSBpdGVtcyB3aXRoIGEga2V5IHRoYXQgc3RhcnRzIHdpdGggdGhlIGdpdmVuIHByZWZpeC4AAAAAYFJhbmRvbW5lc3NDb2xsZWN0aXZlRmxpcAAAAAAAARBCYWJlAAEITHJlcG9ydF9lcXVpdm9jYXRpb24ISGVxdWl2b2NhdGlvbl9wcm9vZlRCYWJlRXF1aXZvY2F0aW9uUHJvb2Y8a2V5X293bmVyX3Byb29mNEtleU93bmVyUHJvb2YQCQFSZXBvcnQgYXV0aG9yaXR5IGVxdWl2b2NhdGlvbi9taXNiZWhhdmlvci4gVGhpcyBtZXRob2Qgd2lsbCB2ZXJpZnkFAXRoZSBlcXVpdm9jYXRpb24gcHJvb2YgYW5kIHZhbGlkYXRlIHRoZSBnaXZlbiBrZXkgb3duZXJzaGlwIHByb29mDQFhZ2FpbnN0IHRoZSBleHRyYWN0ZWQgb2ZmZW5kZXIuIElmIGJvdGggYXJlIHZhbGlkLCB0aGUgb2ZmZW5jZSB3aWxsMGJlIHJlcG9ydGVkLnByZXBvcnRfZXF1aXZvY2F0aW9uX3Vuc2lnbmVkCEhlcXVpdm9jYXRpb25fcHJvb2ZUQmFiZUVxdWl2b2NhdGlvblByb29mPGtleV9vd25lcl9wcm9vZjRLZXlPd25lclByb29mIAkBUmVwb3J0IGF1dGhvcml0eSBlcXVpdm9jYXRpb24vbWlzYmVoYXZpb3IuIFRoaXMgbWV0aG9kIHdpbGwgdmVyaWZ5BQF0aGUgZXF1aXZvY2F0aW9uIHByb29mIGFuZCB2YWxpZGF0ZSB0aGUgZ2l2ZW4ga2V5IG93bmVyc2hpcCBwcm9vZg0BYWdhaW5zdCB0aGUgZXh0cmFjdGVkIG9mZmVuZGVyLiBJZiBib3RoIGFyZSB2YWxpZCwgdGhlIG9mZmVuY2Ugd2lsbDBiZSByZXBvcnRlZC4NAVRoaXMgZXh0cmluc2ljIG11c3QgYmUgY2FsbGVkIHVuc2lnbmVkIGFuZCBpdCBpcyBleHBlY3RlZCB0aGF0IG9ubHkVAWJsb2NrIGF1dGhvcnMgd2lsbCBjYWxsIGl0ICh2YWxpZGF0ZWQgaW4gYFZhbGlkYXRlVW5zaWduZWRgKSwgYXMgc3VjaBUBaWYgdGhlIGJsb2NrIGF1dGhvciBpcyBkZWZpbmVkIGl0IHdpbGwgYmUgZGVmaW5lZCBhcyB0aGUgZXF1aXZvY2F0aW9uJHJlcG9ydGVyLgAAAAIkVGltZXN0YW1wAAEEDHNldAQMbm93PENvbXBhY3Q8TW9tZW50PgRUU2V0IHRoZSBjdXJyZW50IHRpbWUuAAAAAxxJbmRpY2VzAAEUFGNsYWltBBRpbmRleDBBY2NvdW50SW5kZXgEmEFzc2lnbiBhbiBwcmV2aW91c2x5IHVuYXNzaWduZWQgaW5kZXguIHRyYW5zZmVyCAxuZXckQWNjb3VudElkFGluZGV4MEFjY291bnRJbmRleAhdAUFzc2lnbiBhbiBpbmRleCBhbHJlYWR5IG93bmVkIGJ5IHRoZSBzZW5kZXIgdG8gYW5vdGhlciBhY2NvdW50LiBUaGUgYmFsYW5jZSByZXNlcnZhdGlvbrhpcyBlZmZlY3RpdmVseSB0cmFuc2ZlcnJlZCB0byB0aGUgbmV3IGFjY291bnQuEGZyZWUEFGluZGV4MEFjY291bnRJbmRleASURnJlZSB1cCBhbiBpbmRleCBvd25lZCBieSB0aGUgc2VuZGVyLjhmb3JjZV90cmFuc2ZlcgwMbmV3JEFjY291bnRJZBRpbmRleDBBY2NvdW50SW5kZXgYZnJlZXplEGJvb2wIVQFGb3JjZSBhbiBpbmRleCB0byBhbiBhY2NvdW50LiBUaGlzIGRvZXNuJ3QgcmVxdWlyZSBhIGRlcG9zaXQuIElmIHRoZSBpbmRleCBpcyBhbHJlYWR56GhlbGQsIHRoZW4gYW55IGRlcG9zaXQgaXMgcmVpbWJ1cnNlZCB0byBpdHMgY3VycmVudCBvd25lci4YZnJlZXplBBRpbmRleDBBY2NvdW50SW5kZXgEZQFGcmVlemUgYW4gaW5kZXggc28gaXQgd2lsbCBhbHdheXMgcG9pbnQgdG8gdGhlIHNlbmRlciBhY2NvdW50LiBUaGlzIGNvbnN1bWVzIHRoZSBkZXBvc2l0LgAAAAQgQmFsYW5jZXMAAQggdHJhbnNmZXIIEGRlc3QwTG9va3VwU291cmNlFHZhbHVlQENvbXBhY3Q8QmFsYW5jZT4E1FRyYW5zZmVyIHNvbWUgbGlxdWlkIGZyZWUgYmFsYW5jZSB0byBhbm90aGVyIGFjY291bnQuTHRyYW5zZmVyX2tlZXBfYWxpdmUIEGRlc3QwTG9va3VwU291cmNlFHZhbHVlQENvbXBhY3Q8QmFsYW5jZT4ITQFTYW1lIGFzIHRoZSBbYHRyYW5zZmVyYF0gY2FsbCwgYnV0IHdpdGggYSBjaGVjayB0aGF0IHRoZSB0cmFuc2ZlciB3aWxsIG5vdCBraWxsIHRoZTxvcmlnaW4gYWNjb3VudC4AAAAFSFRyYW5zYWN0aW9uUGF5bWVudAAAAAAABihBdXRob3JzaGlwAAEEKHNldF91bmNsZXMEKG5ld191bmNsZXMsVmVjPEhlYWRlcj4EYFByb3ZpZGUgYSBzZXQgb2YgdW5jbGVzLgAAAAccU3Rha2luZwABVBBib25kCChjb250cm9sbGVyMExvb2t1cFNvdXJjZRR2YWx1ZUhDb21wYWN0PEJhbGFuY2VPZj4IYQFUYWtlIHRoZSBvcmlnaW4gYWNjb3VudCBhcyBhIHN0YXNoIGFuZCBsb2NrIHVwIGB2YWx1ZWAgb2YgaXRzIGJhbGFuY2UuIGBjb250cm9sbGVyYCB3aWxsgGJlIHRoZSBhY2NvdW50IHRoYXQgY29udHJvbHMgaXQuKGJvbmRfZXh0cmEEOG1heF9hZGRpdGlvbmFsSENvbXBhY3Q8QmFsYW5jZU9mPghhAUFkZCBzb21lIGV4dHJhIGFtb3VudCB0aGF0IGhhdmUgYXBwZWFyZWQgaW4gdGhlIHN0YXNoIGBmcmVlX2JhbGFuY2VgIGludG8gdGhlIGJhbGFuY2UgdXAwZm9yIHN0YWtpbmcuGHVuYm9uZAQUdmFsdWVIQ29tcGFjdDxCYWxhbmNlT2Y+DFEBU2NoZWR1bGUgYSBwb3J0aW9uIG9mIHRoZSBzdGFzaCB0byBiZSB1bmxvY2tlZCByZWFkeSBmb3IgdHJhbnNmZXIgb3V0IGFmdGVyIHRoZSBib25k/HBlcmlvZCBlbmRzLiBJZiB0aGlzIGxlYXZlcyBhbiBhbW91bnQgYWN0aXZlbHkgYm9uZGVkIGxlc3MgdGhhbiEBVDo6Q3VycmVuY3k6Om1pbmltdW1fYmFsYW5jZSgpLCB0aGVuIGl0IGlzIGluY3JlYXNlZCB0byB0aGUgZnVsbCBhbW91bnQuGHJlYm9uZAQUdmFsdWVIQ29tcGFjdDxCYWxhbmNlT2Y+BNxSZWJvbmQgYSBwb3J0aW9uIG9mIHRoZSBzdGFzaCBzY2hlZHVsZWQgdG8gYmUgdW5sb2NrZWQuRHdpdGhkcmF3X3VuYm9uZGVkAAQpAVJlbW92ZSBhbnkgdW5sb2NrZWQgY2h1bmtzIGZyb20gdGhlIGB1bmxvY2tpbmdgIHF1ZXVlIGZyb20gb3VyIG1hbmFnZW1lbnQuIHZhbGlkYXRlBBRwcmVmczhWYWxpZGF0b3JQcmVmcwTkRGVjbGFyZSB0aGUgZGVzaXJlIHRvIHZhbGlkYXRlIGZvciB0aGUgb3JpZ2luIGNvbnRyb2xsZXIuJGd1YXJhbnRlZQQYdGFyZ2V0YChMb29rdXBTb3VyY2UsQmFsYW5jZU9mKQQRAURlY2xhcmUgdGhlIGRlc2lyZSB0byBndWFyYW50ZWUgYHRhcmdldHNgIGZvciB0aGUgb3JpZ2luIGNvbnRyb2xsZXIuNGN1dF9ndWFyYW50ZWUEGHRhcmdldGAoTG9va3VwU291cmNlLEJhbGFuY2VPZikE+ERlY2xhcmUgdGhlIGRlc2lyZSB0byBjdXQgZ3VhcmFudGVlIGZvciB0aGUgb3JpZ2luIGNvbnRyb2xsZXIuFGNoaWxsAATIRGVjbGFyZSBubyBkZXNpcmUgdG8gZWl0aGVyIHZhbGlkYXRlIG9yIGd1YXJhbnRlZS44c2V0X2NvbnRyb2xsZXIEKGNvbnRyb2xsZXIwTG9va3VwU291cmNlBIwoUmUtKXNldCB0aGUgY29udHJvbGxlciBvZiBhIHN0YXNoLjhyZXdhcmRfc3Rha2Vycwg8dmFsaWRhdG9yX3N0YXNoJEFjY291bnRJZAxlcmEgRXJhSW5kZXgEDQFQYXkgb3V0IGFsbCB0aGUgc3Rha2VycyBiZWhpbmQgYSBzaW5nbGUgdmFsaWRhdG9yIGZvciBhIHNpbmdsZSBlcmEuTHNldF92YWxpZGF0b3JfY291bnQEDG5ldzBDb21wYWN0PHUzMj4EkFNldHMgdGhlIGlkZWFsIG51bWJlciBvZiB2YWxpZGF0b3JzLmBpbmNyZWFzZV92YWxpZGF0b3JfY291bnQEKGFkZGl0aW9uYWwwQ29tcGFjdDx1MzI+BKhJbmNyZW1lbnRzIHRoZSBpZGVhbCBudW1iZXIgb2YgdmFsaWRhdG9ycy40Zm9yY2Vfbm9fZXJhcwAErEZvcmNlIHRoZXJlIHRvIGJlIG5vIG5ldyBlcmFzIGluZGVmaW5pdGVseS40Zm9yY2VfbmV3X2VyYQAISQFGb3JjZSB0aGVyZSB0byBiZSBhIG5ldyBlcmEgYXQgdGhlIGVuZCBvZiB0aGUgbmV4dCBzZXNzaW9uLiBBZnRlciB0aGlzLCBpdCB3aWxsIGJlnHJlc2V0IHRvIG5vcm1hbCAobm9uLWZvcmNlZCkgYmVoYXZpb3VyLkRzZXRfaW52dWxuZXJhYmxlcwQodmFsaWRhdG9yczhWZWM8QWNjb3VudElkPgTIU2V0IHRoZSB2YWxpZGF0b3JzIHdobyBjYW5ub3QgYmUgc2xhc2hlZCAoaWYgYW55KS40Zm9yY2VfdW5zdGFrZQQUc3Rhc2gkQWNjb3VudElkBAkBRm9yY2UgYSBjdXJyZW50IHN0YWtlciB0byBiZWNvbWUgY29tcGxldGVseSB1bnN0YWtlZCwgaW1tZWRpYXRlbHkuUGZvcmNlX25ld19lcmFfYWx3YXlzAAQBAUZvcmNlIHRoZXJlIHRvIGJlIGEgbmV3IGVyYSBhdCB0aGUgZW5kIG9mIHNlc3Npb25zIGluZGVmaW5pdGVseS5UY2FuY2VsX2RlZmVycmVkX3NsYXNoCAxlcmEgRXJhSW5kZXg0c2xhc2hfaW5kaWNlcyBWZWM8dTMyPgSUQ2FuY2VsIGVuYWN0bWVudCBvZiBhIGRlZmVycmVkIHNsYXNoLihyZWFwX3N0YXNoBBRzdGFzaCRBY2NvdW50SWQMNQFSZW1vdmUgYWxsIGRhdGEgc3RydWN0dXJlIGNvbmNlcm5pbmcgYSBzdGFrZXIvc3Rhc2ggb25jZSBpdHMgYmFsYW5jZSBpcyB6ZXJvLl0BVGhpcyBpcyBlc3NlbnRpYWxseSBlcXVpdmFsZW50IHRvIGB3aXRoZHJhd191bmJvbmRlZGAgZXhjZXB0IGl0IGNhbiBiZSBjYWxsZWQgYnkgYW55b25lvGFuZCB0aGUgdGFyZ2V0IGBzdGFzaGAgbXVzdCBoYXZlIG5vIGZ1bmRzIGxlZnQuUHNldF9zdGFydF9yZXdhcmRfZXJhBEBzdGFydF9yZXdhcmRfZXJhIEVyYUluZGV4AAAAAAgoSGlzdG9yaWNhbAAAAAAACRxTZXNzaW9uAAEIIHNldF9rZXlzCBBrZXlzEEtleXMUcHJvb2YUQnl0ZXMM5FNldHMgdGhlIHNlc3Npb24ga2V5KHMpIG9mIHRoZSBmdW5jdGlvbiBjYWxsZXIgdG8gYGtleXNgLh0BQWxsb3dzIGFuIGFjY291bnQgdG8gc2V0IGl0cyBzZXNzaW9uIGtleSBwcmlvciB0byBiZWNvbWluZyBhIHZhbGlkYXRvci7AVGhpcyBkb2Vzbid0IHRha2UgZWZmZWN0IHVudGlsIHRoZSBuZXh0IHNlc3Npb24uKHB1cmdlX2tleXMACMhSZW1vdmVzIGFueSBzZXNzaW9uIGtleShzKSBvZiB0aGUgZnVuY3Rpb24gY2FsbGVyLsBUaGlzIGRvZXNuJ3QgdGFrZSBlZmZlY3QgdW50aWwgdGhlIG5leHQgc2Vzc2lvbi4AAAAKHEdyYW5kcGEAAQxMcmVwb3J0X2VxdWl2b2NhdGlvbghIZXF1aXZvY2F0aW9uX3Byb29mYEdyYW5kcGFFcXVpdm9jYXRpb25Qcm9vZjxrZXlfb3duZXJfcHJvb2Y0S2V5T3duZXJQcm9vZhAJAVJlcG9ydCB2b3RlciBlcXVpdm9jYXRpb24vbWlzYmVoYXZpb3IuIFRoaXMgbWV0aG9kIHdpbGwgdmVyaWZ5IHRoZfRlcXVpdm9jYXRpb24gcHJvb2YgYW5kIHZhbGlkYXRlIHRoZSBnaXZlbiBrZXkgb3duZXJzaGlwIHByb29m+GFnYWluc3QgdGhlIGV4dHJhY3RlZCBvZmZlbmRlci4gSWYgYm90aCBhcmUgdmFsaWQsIHRoZSBvZmZlbmNlRHdpbGwgYmUgcmVwb3J0ZWQucHJlcG9ydF9lcXVpdm9jYXRpb25fdW5zaWduZWQISGVxdWl2b2NhdGlvbl9wcm9vZmBHcmFuZHBhRXF1aXZvY2F0aW9uUHJvb2Y8a2V5X293bmVyX3Byb29mNEtleU93bmVyUHJvb2YQCQFSZXBvcnQgdm90ZXIgZXF1aXZvY2F0aW9uL21pc2JlaGF2aW9yLiBUaGlzIG1ldGhvZCB3aWxsIHZlcmlmeSB0aGX0ZXF1aXZvY2F0aW9uIHByb29mIGFuZCB2YWxpZGF0ZSB0aGUgZ2l2ZW4ga2V5IG93bmVyc2hpcCBwcm9vZvhhZ2FpbnN0IHRoZSBleHRyYWN0ZWQgb2ZmZW5kZXIuIElmIGJvdGggYXJlIHZhbGlkLCB0aGUgb2ZmZW5jZUR3aWxsIGJlIHJlcG9ydGVkLjBub3RlX3N0YWxsZWQIFGRlbGF5LEJsb2NrTnVtYmVybGJlc3RfZmluYWxpemVkX2Jsb2NrX251bWJlcixCbG9ja051bWJlchwZAU5vdGUgdGhhdCB0aGUgY3VycmVudCBhdXRob3JpdHkgc2V0IG9mIHRoZSBHUkFORFBBIGZpbmFsaXR5IGdhZGdldCBoYXMlAXN0YWxsZWQuIFRoaXMgd2lsbCB0cmlnZ2VyIGEgZm9yY2VkIGF1dGhvcml0eSBzZXQgY2hhbmdlIGF0IHRoZSBiZWdpbm5pbmcdAW9mIHRoZSBuZXh0IHNlc3Npb24sIHRvIGJlIGVuYWN0ZWQgYGRlbGF5YCBibG9ja3MgYWZ0ZXIgdGhhdC4gVGhlIGRlbGF5EQFzaG91bGQgYmUgaGlnaCBlbm91Z2ggdG8gc2FmZWx5IGFzc3VtZSB0aGF0IHRoZSBibG9jayBzaWduYWxsaW5nIHRoZSUBZm9yY2VkIGNoYW5nZSB3aWxsIG5vdCBiZSByZS1vcmdlZCAoZS5nLiAxMDAwIGJsb2NrcykuIFRoZSBHUkFORFBBIHZvdGVycyUBd2lsbCBzdGFydCB0aGUgbmV3IGF1dGhvcml0eSBzZXQgdXNpbmcgdGhlIGdpdmVuIGZpbmFsaXplZCBibG9jayBhcyBiYXNlLlhPbmx5IGNhbGxhYmxlIGJ5IHJvb3QuAAAACyBJbU9ubGluZQABBCRoZWFydGJlYXQIJGhlYXJ0YmVhdCRIZWFydGJlYXQoX3NpZ25hdHVyZSRTaWduYXR1cmUkKCMgPHdlaWdodD49AS0gQ29tcGxleGl0eTogYE8oSyArIEUpYCB3aGVyZSBLIGlzIGxlbmd0aCBvZiBgS2V5c2AgKGhlYXJ0YmVhdC52YWxpZGF0b3JzX2xlbin0YW5kIEUgaXMgbGVuZ3RoIG9mIGBoZWFydGJlYXQubmV0d29ya19zdGF0ZS5leHRlcm5hbF9hZGRyZXNzYIAtIGBPKEspYDogZGVjb2Rpbmcgb2YgbGVuZ3RoIGBLYKQtIGBPKEUpYDogZGVjb2RpbmcvZW5jb2Rpbmcgb2YgbGVuZ3RoIGBFYDkBLSBEYlJlYWRzOiBwYWxsZXRfc2Vzc2lvbiBgVmFsaWRhdG9yc2AsIHBhbGxldF9zZXNzaW9uIGBDdXJyZW50SW5kZXhgLCBgS2V5c2AsUGBSZWNlaXZlZEhlYXJ0YmVhdHNggC0gRGJXcml0ZXM6IGBSZWNlaXZlZEhlYXJ0YmVhdHNgLCMgPC93ZWlnaHQ+AAAADEhBdXRob3JpdHlEaXNjb3ZlcnkAAQAAAAANIE9mZmVuY2VzAAEAAAAADiBUcmVhc3VyeQABDDRwcm9wb3NlX3NwZW5kCBR2YWx1ZUhDb21wYWN0PEJhbGFuY2VPZj4sYmVuZWZpY2lhcnkwTG9va3VwU291cmNlDCkBUHV0IGZvcndhcmQgYSBzdWdnZXN0aW9uIGZvciBzcGVuZGluZy4gQSBkZXBvc2l0IHByb3BvcnRpb25hbCB0byB0aGUgdmFsdWUxAWlzIHJlc2VydmVkIGFuZCBzbGFzaGVkIGlmIHRoZSBwcm9wb3NhbCBpcyByZWplY3RlZC4gSXQgaXMgcmV0dXJuZWQgb25jZSB0aGVQcHJvcG9zYWwgaXMgYXdhcmRlZC48cmVqZWN0X3Byb3Bvc2FsBCxwcm9wb3NhbF9pZFhDb21wYWN0PFByb3Bvc2FsSW5kZXg+BPhSZWplY3QgYSBwcm9wb3NlZCBzcGVuZC4gVGhlIG9yaWdpbmFsIGRlcG9zaXQgd2lsbCBiZSBzbGFzaGVkLkBhcHByb3ZlX3Byb3Bvc2FsBCxwcm9wb3NhbF9pZFhDb21wYWN0PFByb3Bvc2FsSW5kZXg+CFkBQXBwcm92ZSBhIHByb3Bvc2FsLiBBdCBhIGxhdGVyIHRpbWUsIHRoZSBwcm9wb3NhbCB3aWxsIGJlIGFsbG9jYXRlZCB0byB0aGUgYmVuZWZpY2lhcnmoYW5kIHRoZSBvcmlnaW5hbCBkZXBvc2l0IHdpbGwgYmUgcmV0dXJuZWQuAAAADyRTY2hlZHVsZXIAARggc2NoZWR1bGUQEHdoZW4sQmxvY2tOdW1iZXI4bWF5YmVfcGVyaW9kaWM4T3B0aW9uPFBlcmlvZD4gcHJpb3JpdHkgUHJpb3JpdHkQY2FsbBBDYWxsBHBBbm9ueW1vdXNseSBzY2hlZHVsZSBhIHRhc2suGGNhbmNlbAgQd2hlbixCbG9ja051bWJlchRpbmRleAx1MzIElENhbmNlbCBhbiBhbm9ueW1vdXNseSBzY2hlZHVsZWQgdGFzay44c2NoZWR1bGVfbmFtZWQUCGlkFEJ5dGVzEHdoZW4sQmxvY2tOdW1iZXI4bWF5YmVfcGVyaW9kaWM4T3B0aW9uPFBlcmlvZD4gcHJpb3JpdHkgUHJpb3JpdHkQY2FsbBBDYWxsBFhTY2hlZHVsZSBhIG5hbWVkIHRhc2suMGNhbmNlbF9uYW1lZAQIaWQUQnl0ZXMEeENhbmNlbCBhIG5hbWVkIHNjaGVkdWxlZCB0YXNrLjhzY2hlZHVsZV9hZnRlchAUYWZ0ZXIsQmxvY2tOdW1iZXI4bWF5YmVfcGVyaW9kaWM4T3B0aW9uPFBlcmlvZD4gcHJpb3JpdHkgUHJpb3JpdHkQY2FsbBBDYWxsBKhBbm9ueW1vdXNseSBzY2hlZHVsZSBhIHRhc2sgYWZ0ZXIgYSBkZWxheS5Qc2NoZWR1bGVfbmFtZWRfYWZ0ZXIUCGlkFEJ5dGVzFGFmdGVyLEJsb2NrTnVtYmVyOG1heWJlX3BlcmlvZGljOE9wdGlvbjxQZXJpb2Q+IHByaW9yaXR5IFByaW9yaXR5EGNhbGwQQ2FsbASQU2NoZWR1bGUgYSBuYW1lZCB0YXNrIGFmdGVyIGEgZGVsYXkuAAAAEBxVdGlsaXR5AAEMFGJhdGNoBBRjYWxscyRWZWM8Q2FsbD4EfFNlbmQgYSBiYXRjaCBvZiBkaXNwYXRjaCBjYWxscy40YXNfZGVyaXZhdGl2ZQgUaW5kZXgMdTE2EGNhbGwQQ2FsbATcU2VuZCBhIGNhbGwgdGhyb3VnaCBhbiBpbmRleGVkIHBzZXVkb255bSBvZiB0aGUgc2VuZGVyLiRiYXRjaF9hbGwEFGNhbGxzJFZlYzxDYWxsPgjsU2VuZCBhIGJhdGNoIG9mIGRpc3BhdGNoIGNhbGxzIGFuZCBhdG9taWNhbGx5IGV4ZWN1dGUgdGhlbS4hAVRoZSB3aG9sZSB0cmFuc2FjdGlvbiB3aWxsIHJvbGxiYWNrIGFuZCBmYWlsIGlmIGFueSBvZiB0aGUgY2FsbHMgZmFpbGVkLgAAABEgSWRlbnRpdHkAATw0YWRkX3JlZ2lzdHJhcgQcYWNjb3VudCRBY2NvdW50SWQEeEFkZCBhIHJlZ2lzdHJhciB0byB0aGUgc3lzdGVtLjBzZXRfaWRlbnRpdHkEEGluZm8wSWRlbnRpdHlJbmZvBCkBU2V0IGFuIGFjY291bnQncyBpZGVudGl0eSBpbmZvcm1hdGlvbiBhbmQgcmVzZXJ2ZSB0aGUgYXBwcm9wcmlhdGUgZGVwb3NpdC4gc2V0X3N1YnMEEHN1YnNUVmVjPChBY2NvdW50SWQsRGF0YSk+BIxTZXQgdGhlIHN1Yi1hY2NvdW50cyBvZiB0aGUgc2VuZGVyLjhjbGVhcl9pZGVudGl0eQAEOQFDbGVhciBhbiBhY2NvdW50J3MgaWRlbnRpdHkgaW5mbyBhbmQgYWxsIHN1Yi1hY2NvdW50cyBhbmQgcmV0dXJuIGFsbCBkZXBvc2l0cy5EcmVxdWVzdF9qdWRnZW1lbnQIJHJlZ19pbmRleFxDb21wYWN0PFJlZ2lzdHJhckluZGV4PhxtYXhfZmVlSENvbXBhY3Q8QmFsYW5jZU9mPgSUUmVxdWVzdCBhIGp1ZGdlbWVudCBmcm9tIGEgcmVnaXN0cmFyLjhjYW5jZWxfcmVxdWVzdAQkcmVnX2luZGV4OFJlZ2lzdHJhckluZGV4BGhDYW5jZWwgYSBwcmV2aW91cyByZXF1ZXN0LhxzZXRfZmVlCBRpbmRleFxDb21wYWN0PFJlZ2lzdHJhckluZGV4PgxmZWVIQ29tcGFjdDxCYWxhbmNlT2Y+BBkBU2V0IHRoZSBmZWUgcmVxdWlyZWQgZm9yIGEganVkZ2VtZW50IHRvIGJlIHJlcXVlc3RlZCBmcm9tIGEgcmVnaXN0cmFyLjhzZXRfYWNjb3VudF9pZAgUaW5kZXhcQ29tcGFjdDxSZWdpc3RyYXJJbmRleD4MbmV3JEFjY291bnRJZAS8Q2hhbmdlIHRoZSBhY2NvdW50IGFzc29jaWF0ZWQgd2l0aCBhIHJlZ2lzdHJhci4oc2V0X2ZpZWxkcwgUaW5kZXhcQ29tcGFjdDxSZWdpc3RyYXJJbmRleD4YZmllbGRzOElkZW50aXR5RmllbGRzBKhTZXQgdGhlIGZpZWxkIGluZm9ybWF0aW9uIGZvciBhIHJlZ2lzdHJhci5EcHJvdmlkZV9qdWRnZW1lbnQMJHJlZ19pbmRleFxDb21wYWN0PFJlZ2lzdHJhckluZGV4Phh0YXJnZXQwTG9va3VwU291cmNlJGp1ZGdlbWVudERJZGVudGl0eUp1ZGdlbWVudAS4UHJvdmlkZSBhIGp1ZGdlbWVudCBmb3IgYW4gYWNjb3VudCdzIGlkZW50aXR5LjRraWxsX2lkZW50aXR5BBh0YXJnZXQwTG9va3VwU291cmNlBEEBUmVtb3ZlIGFuIGFjY291bnQncyBpZGVudGl0eSBhbmQgc3ViLWFjY291bnQgaW5mb3JtYXRpb24gYW5kIHNsYXNoIHRoZSBkZXBvc2l0cy4cYWRkX3N1YggMc3ViMExvb2t1cFNvdXJjZRBkYXRhEERhdGEErEFkZCB0aGUgZ2l2ZW4gYWNjb3VudCB0byB0aGUgc2VuZGVyJ3Mgc3Vicy4ocmVuYW1lX3N1YggMc3ViMExvb2t1cFNvdXJjZRBkYXRhEERhdGEEzEFsdGVyIHRoZSBhc3NvY2lhdGVkIG5hbWUgb2YgdGhlIGdpdmVuIHN1Yi1hY2NvdW50LihyZW1vdmVfc3ViBAxzdWIwTG9va3VwU291cmNlBMBSZW1vdmUgdGhlIGdpdmVuIGFjY291bnQgZnJvbSB0aGUgc2VuZGVyJ3Mgc3Vicy4gcXVpdF9zdWIABIxSZW1vdmUgdGhlIHNlbmRlciBhcyBhIHN1Yi1hY2NvdW50LgAAABIUU3dvcmsAASwgc2V0X2NvZGUIIG5ld19jb2RlLFN3b3JrZXJDb2RlMGV4cGlyZV9ibG9jayxCbG9ja051bWJlcggRAVNldCBjb2RlIGZvciBBQiBVcGdyYWRlLCB0aGlzIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBieSBgcm9vdGAgb3JpZ2luZFJ1bGVkIGJ5IGBzdWRvL2RlbW9jcmFjeWBIY2xlYXJfZXhwaXJlZF9jb2RlBDBleHBpcmVkX2NvZGUsU3dvcmtlckNvZGUEWGNsZWFyIHRoZSBleHBpcmVkIGNvZGUgcmVnaXN0ZXIUHGlhc19zaWcYSUFTU2lnIGlhc19jZXJ0LFN3b3JrZXJDZXJ0HGFwcGxpZXIkQWNjb3VudElkIGlzdl9ib2R5HElTVkJvZHkMc2lnQFN3b3JrZXJTaWduYXR1cmUI7FJlZ2lzdGVyIGFzIG5ldyB0cnVzdGVkIG5vZGUsIGNhbiBvbmx5IGNhbGxlZCBmcm9tIHNXb3JrZXIu5EFsbCBgaW5wdXRzYCBjYW4gb25seSBiZSBnZW5lcmF0ZWQgZnJvbSBzV29ya2VyJ3MgZW5jbGF2ZTByZXBvcnRfd29ya3MsHGN1cnJfcGs0U3dvcmtlclB1YktleTRhYl91cGdyYWRlX3BrNFN3b3JrZXJQdWJLZXkQc2xvdAx1NjQkc2xvdF9oYXNoFEJ5dGVzRHJlcG9ydGVkX3NyZF9zaXplDHU2NExyZXBvcnRlZF9maWxlc19zaXplDHU2NCxhZGRlZF9maWxlc2RWZWM8KE1lcmtsZVJvb3QsdTY0LHU2NCk+NGRlbGV0ZWRfZmlsZXNkVmVjPChNZXJrbGVSb290LHU2NCx1NjQpPkRyZXBvcnRlZF9zcmRfcm9vdChNZXJrbGVSb290THJlcG9ydGVkX2ZpbGVzX3Jvb3QoTWVya2xlUm9vdAxzaWdAU3dvcmtlclNpZ25hdHVyZQiEUmVwb3J0IHN0b3JhZ2Ugd29ya3MgZnJvbSBzV29ya2Vy5EFsbCBgaW5wdXRzYCBjYW4gb25seSBiZSBnZW5lcmF0ZWQgZnJvbSBzV29ya2VyJ3MgZW5jbGF2ZTBjcmVhdGVfZ3JvdXAABOxDcmVhdGUgYSBncm91cC4gT25lIGFjY291bnQgY2FuIG9ubHkgY3JlYXRlIG9uZSBncm91cCBvbmNlLmRhZGRfbWVtYmVyX2ludG9fYWxsb3dsaXN0BBh0YXJnZXQwTG9va3VwU291cmNlAHByZW1vdmVfbWVtYmVyX2Zyb21fYWxsb3dsaXN0BBh0YXJnZXQwTG9va3VwU291cmNlAChqb2luX2dyb3VwBBh0YXJnZXQwTG9va3VwU291cmNlCHEBSm9pbiBhIGdyb3VwLiBUaGUgYWNjb3VudCBzaG91bGQgYWxyZWFkeSByZXBvcnQgd29ya3Mgb25jZSBhbmQgY2Fubm90IGhhdmUgYW55IHNwb3dlciB2YWx1ZS6EVGhlIHRhcmdldCBtdXN0IGJlIGEgZ3JvdXAgb3duZXIuKHF1aXRfZ3JvdXAABDRRdWl0IGEgZ3JvdXAuIGtpY2tfb3V0BBh0YXJnZXQwTG9va3VwU291cmNlBHxLaWNrIHNvbWVvbmUgb3V0IG9mIHRoaXMgZ3JvdXAuOHNldF9wdW5pc2htZW50BChpc19lbmFibGVkEGJvb2wEXFNldCB0aGUgcHVuaXNobWVudCBmbGFnAAAAExhNYXJrZXQAARhMcGxhY2Vfc3RvcmFnZV9vcmRlchAMY2lkKE1lcmtsZVJvb3RIcmVwb3J0ZWRfZmlsZV9zaXplDHU2NBB0aXBzSENvbXBhY3Q8QmFsYW5jZU9mPhRfbWVtbxRCeXRlcwSVAVBsYWNlIGEgc3RvcmFnZSBvcmRlci4gVGhlIGNpZCBhbmQgZmlsZV9zaXplIG9mIHRoaXMgZmlsZSBzaG91bGQgYmUgcHJvdmlkZWQuIEV4dHJhIHRpcHMgaXMgYWNjZXB0ZWQuLGFkZF9wcmVwYWlkCAxjaWQoTWVya2xlUm9vdBhhbW91bnRIQ29tcGFjdDxCYWxhbmNlT2Y+CLRBZGQgcHJlcGFpZCBhbW91bnQgb2YgY3VycmVuY3kgZm9yIHRoaXMgZmlsZS59AUlmIHRoaXMgZmlsZSBoYXMgcHJlcGFpZCB2YWx1ZSBhbmQgZW5vdWdoIGZvciBhIG5ldyBzdG9yYWdlIG9yZGVyLCBpdCBjYW4gYmUgcmVuZXdlZCBieSBhbnlvbmUuQGNhbGN1bGF0ZV9yZXdhcmQEDGNpZChNZXJrbGVSb290BHxDYWxjdWxhdGUgdGhlIHJld2FyZCBmb3IgYSBmaWxlPHJld2FyZF9tZXJjaGFudAAERFJld2FyZCBhIG1lcmNoYW50RHNldF9lbmFibGVfbWFya2V0BChpc19lbmFibGVkEGJvb2wEZE9wZW4vQ2xvc2UgbWFya2V0IHNlcnZpY2Uwc2V0X2Jhc2VfZmVlBCBiYXNlX2ZlZUhDb21wYWN0PEJhbGFuY2VPZj4EVFNldCB0aGUgZmlsZSBiYXNlIGZlZQAAABQYQ2xhaW1zAAEUPGNoYW5nZV9zdXBlcmlvcgQwbmV3X3N1cGVyaW9yMExvb2t1cFNvdXJjZQQ8Q2hhbmdlIHN1cGVyaW9yMGNoYW5nZV9taW5lcgQkbmV3X21pbmVyMExvb2t1cFNvdXJjZQQwQ2hhbmdlIG1pbmVyPHNldF9jbGFpbV9saW1pdAQUbGltaXQkQmFsYW5jZU9mBDxTZXQgY2xhaW0gbGltaXQobWludF9jbGFpbQwIdHg4RXRoZXJldW1UeEhhc2gMd2hvPEV0aGVyZXVtQWRkcmVzcxR2YWx1ZSRCYWxhbmNlT2YEOE1pbnQgdGhlIGNsYWltFGNsYWltDBBkZXN0JEFjY291bnRJZAh0eDhFdGhlcmV1bVR4SGFzaAxzaWc4RWNkc2FTaWduYXR1cmUAAAAAFSBCZW5lZml0cwABEERhZGRfYmVuZWZpdF9mdW5kcwgUdmFsdWVIQ29tcGFjdDxCYWxhbmNlT2Y+KGZ1bmRzX3R5cGUkRnVuZHNUeXBlBERBZGQgYmVuZWZpdCBmdW5kc0RjdXRfYmVuZWZpdF9mdW5kcwgUdmFsdWVIQ29tcGFjdDxCYWxhbmNlT2Y+KGZ1bmRzX3R5cGUkRnVuZHNUeXBlBERDdXQgYmVuZWZpdCBmdW5kc1h3aXRoZHJhd19iZW5lZml0X2Z1bmRzAARYV2l0aGRyYXcgYmVuZWZpdCBmdW5kc1ByZWJvbmRfYmVuZWZpdF9mdW5kcwgUdmFsdWVIQ29tcGFjdDxCYWxhbmNlT2Y+KGZ1bmRzX3R5cGUkRnVuZHNUeXBlBFhXaXRoZHJhdyBiZW5lZml0IGZ1bmRzAAAAFhRMb2NrcwABCDxzZXRfdW5sb2NrX2Zyb20EEGRhdGUsQmxvY2tOdW1iZXIIZFNldCB0aGUgZ2xvYmFsIHN0YXJ0IGRhdGVcSXQgY2FuIG9ubHkgYmUgc2V0IG9uY2UYdW5sb2NrAASQVW5sb2NrIHRoZSBDUlUxOCBvciBDUlUyNCBvbmUgcGVyaW9kAAAAFxBTdWRvAAEQEHN1ZG8EEGNhbGwQQ2FsbAQ1AUF1dGhlbnRpY2F0ZXMgdGhlIHN1ZG8ga2V5IGFuZCBkaXNwYXRjaGVzIGEgZnVuY3Rpb24gY2FsbCB3aXRoIGBSb290YCBvcmlnaW4uVHN1ZG9fdW5jaGVja2VkX3dlaWdodAgQY2FsbBBDYWxsHF93ZWlnaHQYV2VpZ2h0DDUBQXV0aGVudGljYXRlcyB0aGUgc3VkbyBrZXkgYW5kIGRpc3BhdGNoZXMgYSBmdW5jdGlvbiBjYWxsIHdpdGggYFJvb3RgIG9yaWdpbi4tAVRoaXMgZnVuY3Rpb24gZG9lcyBub3QgY2hlY2sgdGhlIHdlaWdodCBvZiB0aGUgY2FsbCwgYW5kIGluc3RlYWQgYWxsb3dzIHRoZbBTdWRvIHVzZXIgdG8gc3BlY2lmeSB0aGUgd2VpZ2h0IG9mIHRoZSBjYWxsLhxzZXRfa2V5BAxuZXcwTG9va3VwU291cmNlBHEBQXV0aGVudGljYXRlcyB0aGUgY3VycmVudCBzdWRvIGtleSBhbmQgc2V0cyB0aGUgZ2l2ZW4gQWNjb3VudElkIChgbmV3YCkgYXMgdGhlIG5ldyBzdWRvIGtleS4cc3Vkb19hcwgMd2hvMExvb2t1cFNvdXJjZRBjYWxsEENhbGwITQFBdXRoZW50aWNhdGVzIHRoZSBzdWRvIGtleSBhbmQgZGlzcGF0Y2hlcyBhIGZ1bmN0aW9uIGNhbGwgd2l0aCBgU2lnbmVkYCBvcmlnaW4gZnJvbUBhIGdpdmVuIGFjY291bnQuAAAAGCBNdWx0aXNpZwABEFBhc19tdWx0aV90aHJlc2hvbGRfMQhEb3RoZXJfc2lnbmF0b3JpZXM4VmVjPEFjY291bnRJZD4QY2FsbBBDYWxsBFEBSW1tZWRpYXRlbHkgZGlzcGF0Y2ggYSBtdWx0aS1zaWduYXR1cmUgY2FsbCB1c2luZyBhIHNpbmdsZSBhcHByb3ZhbCBmcm9tIHRoZSBjYWxsZXIuIGFzX211bHRpGCR0aHJlc2hvbGQMdTE2RG90aGVyX3NpZ25hdG9yaWVzOFZlYzxBY2NvdW50SWQ+PG1heWJlX3RpbWVwb2ludERPcHRpb248VGltZXBvaW50PhBjYWxsKE9wYXF1ZUNhbGwoc3RvcmVfY2FsbBBib29sKG1heF93ZWlnaHQYV2VpZ2h0CFUBUmVnaXN0ZXIgYXBwcm92YWwgZm9yIGEgZGlzcGF0Y2ggdG8gYmUgbWFkZSBmcm9tIGEgZGV0ZXJtaW5pc3RpYyBjb21wb3NpdGUgYWNjb3VudCBpZvhhcHByb3ZlZCBieSBhIHRvdGFsIG9mIGB0aHJlc2hvbGQgLSAxYCBvZiBgb3RoZXJfc2lnbmF0b3JpZXNgLkBhcHByb3ZlX2FzX211bHRpFCR0aHJlc2hvbGQMdTE2RG90aGVyX3NpZ25hdG9yaWVzOFZlYzxBY2NvdW50SWQ+PG1heWJlX3RpbWVwb2ludERPcHRpb248VGltZXBvaW50PiRjYWxsX2hhc2gcW3U4OzMyXShtYXhfd2VpZ2h0GFdlaWdodAhVAVJlZ2lzdGVyIGFwcHJvdmFsIGZvciBhIGRpc3BhdGNoIHRvIGJlIG1hZGUgZnJvbSBhIGRldGVybWluaXN0aWMgY29tcG9zaXRlIGFjY291bnQgaWb4YXBwcm92ZWQgYnkgYSB0b3RhbCBvZiBgdGhyZXNob2xkIC0gMWAgb2YgYG90aGVyX3NpZ25hdG9yaWVzYC48Y2FuY2VsX2FzX211bHRpECR0aHJlc2hvbGQMdTE2RG90aGVyX3NpZ25hdG9yaWVzOFZlYzxBY2NvdW50SWQ+JHRpbWVwb2ludCRUaW1lcG9pbnQkY2FsbF9oYXNoHFt1ODszMl0IVQFDYW5jZWwgYSBwcmUtZXhpc3RpbmcsIG9uLWdvaW5nIG11bHRpc2lnIHRyYW5zYWN0aW9uLiBBbnkgZGVwb3NpdCByZXNlcnZlZCBwcmV2aW91c2x5xGZvciB0aGlzIG9wZXJhdGlvbiB3aWxsIGJlIHVucmVzZXJ2ZWQgb24gc3VjY2Vzcy4AAAAZBBxAQ2hlY2tTcGVjVmVyc2lvbjhDaGVja1R4VmVyc2lvbjBDaGVja0dlbmVzaXM4Q2hlY2tNb3J0YWxpdHkoQ2hlY2tOb25jZSxDaGVja1dlaWdodGBDaGFyZ2VUcmFuc2FjdGlvblBheW1lbnQ=';

// const LOCAL_CHAIN = {
//   name: 'localhost',
//   genesisHash: '0x3f98596e59a54219859ec2741803986fb4c5920051804d0bb3dc781a518eec2f',
//   icon: 'substrate',
//   specVersion: 1,
//   ss58Format: 42,
//   tokenDecimals: 18,
//   tokenSymbol: 'CRU',
//   types: {},
// };

const CRUST_MAXWELL_CHAIN = {
  name: 'crust maxwell',
  genesisHash: '0xb19e8874eb2013dc100534fafa322e105eea53c0aa02cd17cf94a2df35fbd41f',
  icon: 'substrate',
  specVersion: 30,
  ss58Format: 42,
  tokenDecimals: 12,
  tokenSymbol: 'CRU',
  types: {},
  metaCalls: MaxwellMetacalls,
};

const CRUST_CHAIN = {
  name: 'crust',
  genesisHash: '0x8b404e7ed8789d813982b9cb4c8b664c05b3fbf433309f603af014ec9ce56a8c',
  icon: 'substrate',
  specVersion: 4,
  ss58Format: 66,
  tokenDecimals: 12,
  tokenSymbol: 'CRU',
  types: {},
  metaCalls: CrustMetacalls,
};

const CRUST_ROCKY_CHAIN = {
  name: 'crust rocky',
  genesisHash: '0xa12aba8778ee057426b19dd8812d04f003e2fe06f94f956f01b693a6462cf50e',
  icon: 'substrate',
  specVersion: 1,
  ss58Format: 42,
  tokenDecimals: 12,
  tokenSymbol: 'CRU',
  types: {},
  metaCalls: '',
};

export const CHAIN = [CRUST_MAXWELL_CHAIN, CRUST_CHAIN, CRUST_ROCKY_CHAIN];
